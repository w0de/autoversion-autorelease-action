name: autoversion & autorelease

on:
  workflow_call:
    inputs:
      # mathieudutour/github-tag-action
      create_annotated_tag:
        description: Create an annotated rather than a lightweight tag.
        required: false
        default: false
        type: boolean
      default_bump:
        description: Can be patch, minor or major.
        required: false
        default: patch
        type: string
      release_branches:
        description: Comma separated list of branches (JavaScript regular expression accepted) that will generate the release tags.
        required: false
        default: main
        type: string
      pre_release_branches:
        description: Comma separated list of branches (JavaScript regular expression accepted) that will generate the release tags.
        required: false
        default: .*
        type: string
      tag_prefix:
        required: false
        default: v
        type: string

      # ncipollo/release-action
      allowUpdates:
        description: An optional flag which indicates if we should update a release if it already exists. Defaults to false.
        required: false
        default: false
        type: boolean
      artifactErrorsFailBuild:
        description: An optional flag which indicates if artifact read or upload errors should fail the build.
        required: false
        default: true
        type: boolean
      artifacts:
        description: An optional set of paths representing artifacts to upload to the release. This may be a single path or a comma delimited list of paths (or globs)
        required: false
        type: string
      artifactContentType:
        description: The content type of the artifact. Defaults to raw
        required: false
        type: string
      draft:
        description: Optionally marks this release as a draft release. Set to true to enable.
        required: false
        default: false
        type: boolean
      generateReleaseNotes:
        description: Generate release notes instead of using tag step's changelog.
        required: false
        default: false
        type: boolean
      makeLatest:
        description: Indicates if the release should be the latest release or not.
        required: false
        default: true
        type: boolean
      name:
        description: Override default version tag name with this custom value.
        required: false
        type: string
      updateOnlyUnreleased:
        description: When allowUpdates is enabled, this will fail the action if the release it is updating is not a draft or a prerelease.
        required: false
        default: false
        type: boolean

      # both
      commit_sha:
        description: The commit SHA value to add the tag. If specified, it uses this value instead GITHUB_SHA. It could be useful when a previous step merged a branch into github.ref.
        required: false
        type: string
      dry_run:
        description: |
          Generate new version tag and output to log. One of:
          - "disabled" (default, not a dry run)
          - "tag" (output putative new tag to log)
          - "draft" (apply new version tag prefixed with "draft_", create draft release)
          - "draft-cleanup" (same as "draft", but release and tag are deleted after creation)
        required: false
        default: disabled
        type: string

    outputs:
      # mathieudutour/github-tag-action
      changelog:
        description: The conventional changelog since the previous tag.
        value: ${{ jobs.autorelease.outputs.changelog }}
      new_version:
        description: The auto-bumped version.
        value: ${{ jobs.autorelease.outputs.new_version }}
      new_tag:
        description: The auto-bumped version tag.
        value: ${{ jobs.autorelease.outputs.new_tag }}
      release_type:
        description: The auto-bumped versions release type.
        value: ${{ jobs.autorelease.outputs.release_type }}

      # ncipollo/release-action
      artifact_upload_url:
        description: The URL for uploading assets to the release.
        value: ${{ jobs.autorelease.outputs.artifact_upload_url }}
      release_id:
        description: The identifier of the created release.
        value: ${{ jobs.autorelease.outputs.release_id }}
      release_url:
        description: The HTML URL of the release.
        value: ${{ jobs.autorelease.outputs.release_url }}

    secrets:
      token:
        description: The github token to use when applying tag.
        required: true


jobs:
  autorelease:
    runs-on: ubuntu-latest

    outputs:
      changelog: ${{ steps.version.outputs.changelog }}
      new_version: ${{ steps.version.outputs.new_version }}
      new_tag: ${{ steps.version.outputs.new_tag }}
      release_type: ${{ steps.version.outputs.release_type }}
      artifact_upload_url: ${{ steps.release.outputs.upload_url }}
      release_id: ${{ steps.release.outputs.id }}
      release_url: ${{ steps.release.outputs.html_url }}

    steps:
      - name: checkout
        uses: actions/checkout@v4  # trusting github's internally developed action (not trusting others, so pinning at sha)

      - name: version
        uses: mathieudutour/github-tag-action@a22cf08638b34d5badda920f9daf6e72c477b07b  # v6.2
        with:
          release_branches: ${{ inputs.release_branches }}
          pre_release_branches: ${{ inputs.pre_release_branches }}
          default_bump: ${{ inputs.default_bump }}
          default_prerelease_bump: pre${{ inputs.default_bump }}
          tag_prefix: ${{ contains(inputs.dry_run, 'draft') && 'draft_' || inputs.tag_prefix }}
          dry_run: ${{ inputs.dry_run == 'tag' }}
          github_token: ${{ secrets.token }}
          create_annotated_tag: ${{ inputs.create_annotated_tag }}
          commit_sha: ${{ inputs.commit_sha }}

      - name: release
        if: ${{ inputs.dry_run != 'tag' }}
        uses: ncipollo/release-action@2c591bcc8ecdcd2db72b97d6147f871fcd833ba5  # v1.14.0
        with:
          allowUpdates: ${{ inputs.allowUpdates }}
          artifactErrorsFailBuild: ${{ inputs.artifactErrorsFailBuild }}
          artifacts: ${{ inputs.artifacts }}
          body: ${{ steps.version.outputs.changelog }}
          commit: ${{ inputs.commit_sha }}
          draft: ${{ inputs.draft || contains(inputs.dry_run, 'draft') }}
          generateReleaseNotes: ${{ inputs.generateReleaseNotes }}
          makeLatest: ${{ inputs.makeLatest }}
          name: ${{ inputs.name || steps.version.outputs.new_version }}
          omitBodyDuringUpdate: true
          omitDraftDuringUpdate: true
          omitNameDuringUpdate: true
          omitPrereleaseDuringUpdate: true
          prerelease: ${{ contains(steps.version.outputs.release_type, 'pre') }}
          removeArtifacts: true
          replacesArtifacts: true
          skipIfReleaseExists: ${{ ! inputs.allowUpdates }}
          tag: ${{ steps.version.outputs.new_tag }}
          token: ${{ secrets.token }}
          updateOnlyUnreleased: ${{ inputs.updateOnlyUnreleased }}

      - name: cleanup release
        if: ${{ inputs.dry_run == 'draft-cleanup' }}
        env:
          GITHUB_TOKEN: ${{ secrets.token }}
        run: gh release delete -y --cleanup-tag ${{ steps.version.new_tag }}
